[
    {
        "input": "5\n3 1 4 5 2",
        "Output": "1 2 3 4 5"
    },
    {
        "input": "3\n10 7 8",
        "Output": "7 8 10"
    },
    {
        "input": "6\n9 6 2 4 3 1",
        "Output": "1 2 3 4 6 9"
    },
    {
        "input": "4\n5 5 5 5",
        "Output": "5 5 5 5"
    },
    {
        "input": "1\n100",
        "Output": "100"
    }
]


import fs from 'fs';
import path from 'path';
import { exec } from 'child_process';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const outputpath = path.join(__dirname, 'outputs');
if (!fs.existsSync(outputpath)) {
  fs.mkdirSync(outputpath, { recursive: true });
}

const executecode = async (filepath,language,inputfilepath) => {
  const jobid = path.basename(filepath).split('.')[0]; 
  const outputFilePath = path.join(outputpath, `${jobid}.out`);
  const inputFilePath = inputfilepath ? inputfilepath : null;
  let command='';
  switch(language){
    case'cpp':
      command= `g++ "${filepath}" -o "${outputFilePath}" && "${outputFilePath}" < "${inputFilePath}"`;
      break;
    case 'py':
      command = `python3 "${filepath}" > "${outputFilePath}" < "${inputFilePath}"`;
      break;
    case 'js':
      command=`node "${filepath}"> "${outputFilePath}"< "${inputFilePath}"`
      break
      case 'c':  
      command = `gcc "${filepath}" -o "${outputFilePath}" && "${outputFilePath}"< "${inputFilePath}"`
      break;
 case'go':
 command= `go run "${filepath}" > "${outputFilePath}"< "${inputFilePath}"`;
 break;
 case'rs':
 command= `rustc "${filepath}" -o "${outputFilePath}" && "${outputFilePath}"< "${inputFilePath}"`;
 break;

  }

  return new Promise((resolve, reject) => {

    

    exec(command,{ shell: true, timeout: 5000 }, (error, stdout, stderr) => {
      if (error) {
        console.log(error)
        return reject(` Compile error: ${error.message}`);
      }
      if (stderr) {
          console.log(stderr)
        return reject(`Runtime stderr: ${stderr}`);
      }
      resolve(stdout); 
    });
  });
};

export default executecode;
